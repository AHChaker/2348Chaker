#Hamid Chaker 2060843
import csv
from datetime import datetime

class Inventory:
    def __init__(self, item_id, manufacturer, type, price, service_date, damaged=False):
        self.item_id = item_id
        self.manufacturer = manufacturer
        self.type = type
        self.price = price
        self.service_date = datetime.strptime(service_date, "%m/%d/%Y")
        self.damaged = damaged


def read_manufacturers(file):
    inv = {}
    with open(file, "r") as f:
        manu_list_reader = csv.reader(f)
        #iterate over every line and in turn, assign every value to a var
        for line in manu_list_reader:
            item_id = line[0]
            manufacturer = line[1].strip()
            type = line[2].strip()
            if len(line) > 3:
                damaged = line[3].strip()
            inv[item_id] = [manufacturer, type, damaged]
    return inv


def read_prices(file):
    #do it again (ft. Chris Brown)
    inv = {}
    with open(file, 'r') as f:
        price_reader = csv.reader(f)
        for line in price_reader:
            item_id = line[0]
            price = line[1:]
            inv[item_id] = price
    return inv


def read_dates(file):
    # hit me baby one more time. there has to be a way to mix the 3 functions but wtv
    inv = {}
    with open(file, 'r') as f:
        price_reader = csv.reader(f)
        for line in price_reader:
            item_id = line[0]
            date = line[1:]
            inv[item_id] = date
    return inv


def all_together(manu, price, date):
    inv = {}
    #checking each files item ids to see if they match
    for item_id, values in manu.items():
        if item_id in price and item_id in date:
            #if files match and format is consistent, assign values in file to variable before initiazling as class att
            new_price = float(price[item_id][0])
            new_date = date[item_id][0]
            inv[item_id] = Inventory(item_id, values[0], values[1], new_price, new_date, values[2])
    return inv

def find_item(query, inv):
    # 2 lists, 1 one to hold the matching items we have and 1 to hold the keywords we are looking for
    m = []
    kw = []

    # Loop through each word in the query and for each word loop through the items values.
    # Conditional and only append to keywords if our word matches the manufacturer and item type of our item
    for word in query.split():
        for item in inv.values():
            if word.lower() == item.manufacturer.lower() or word.lower() == item.type.lower():
                kw.append(word.lower())
                break

    # join the keywords to include in our search for matches
    match_search = ' '.join(kw)
    # Again loop through our inventory values, First check whether our manufacturer and type match the keywords in our match
    # and then check whether the items are not damaged and not past their due date.
    for item in inv.values():
        if f"{item.manufacturer} {item.type}".lower() == match_search.lower():
            if not item.damaged and item.service_date > datetime.now():
                m.append(item)
    '''Check how many matches were found and display the appropriate result
    if one was found, then print the item details, and a you may also consider, where the conditions are the same item type but different manufacturer
    if there are more than 1 matches, display the most expensive one, i had to write a function to grab the most expensive one and then call that'''
    if len(m) == 0:
        print("No such item in inventory")
    elif len(m) == 1:
        item = m[0]
        print("Your item is:", item.item_id, item.manufacturer, item.type, item.price)
        closest = find_closest_item(item, inv)
        if closest:
            print("You may also consider:", closest.item_id, closest.manufacturer, closest.type, closest.price)
    else:
        def h_item(item):
            return item.price
        max_item = max(m, key=h_item)
        print(f"Your item is: {max_item.item_id} {max_item.manufacturer} {max_item.type} {max_item.price}")
        closest = find_closest_item(item, inv)
        if closest:
            print("You may also consider:", closest.item_id, closest.manufacturer, closest.type, closest.price)


def find_closest_item(item, inv):
    #list to hold the matches, matches will include the same criteria as previously mentiioned except for the manufacturer name not being the same
    m = []
    for i in inv.values():
        if i.manufacturer.lower() != item.manufacturer.lower() and i.item_type.lower() == item.item_type.lower() and not i.damaged and i.service_date > datetime.now():
            m.append(i)

    #set variable to none and the min_diff to closest thing to infinity (not really)
    #for each match, find the price diff between the match and item, if the price diff is lower the min diff. update closest and min price diff until youve looped everything
    closest = None
    min_diff = float(10000000000000000)
    for i in m:
        diff = abs(float(i.price) - float(item.price))
        if diff < min_diff:
            closest = i
            min_diff = diff

    return closest


if __name__ == '__main__':

