#Hamid Chaker 2060843
import csv
from datetime import datetime

class Inventory:
    def __init__(self, item_id, manufacturer, type, price, service_date, damaged=False):
        self.item_id = item_id
        self.manufacturer = manufacturer
        self.type = type
        self.price = price
        self.service_date = datetime.strptime(service_date, "%m/%d/%Y")
        self.damaged = damaged


def read_manufacturers(file):
    inv = {}
    with open(file, "r") as f:
        manu_list_reader = csv.reader(f)
        #iterate over every line and in turn, assign every value to a var
        for line in manu_list_reader:
            item_id = line[0]
            manufacturer = line[1]
            type = line[2]
            if len(line) > 3:
                damaged = line[3]
            inv[item_id] = [manufacturer, type, damaged]
    return inv


def read_prices(file):
    #do it again (ft. Chris Brown)
    inv = {}
    with open(file, 'r') as f:
        price_reader = csv.reader(f)
        for line in price_reader:
            item_id = line[0]
            price = line[1:]
            inv[item_id] = price
    return inv


def read_dates(file):
    # hit me baby one more time. there has to be a way to mix the 3 functions but wtv
    inv = {}
    with open(file, 'r') as f:
        price_reader = csv.reader(f)
        for line in price_reader:
            item_id = line[0]
            date = line[1:]
            inv[item_id] = date
    return inv


def all_together(manu, price, date):
    inv = {}
    #checking each files item ids to see if they match
    for item_id, values in manu.items():
        if item_id in price and item_id in date:
            #if files match and format is consistent, assign values in file to variable before initiazling as class att
            new_price = price[item_id][0]
            new_date = date[item_id][0]
            inv[item_id] = Inventory(item_id, values[0], values[1], new_price, new_date, values[2])
    return inv


if __name__ == '__main__':

